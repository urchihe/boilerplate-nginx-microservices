<?xml version="1.0"?>
<ruleset name="My first PHPMD rule set"
         xmlns="http://pmd.sf.net/ruleset/1.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0
                     http://pmd.sf.net/ruleset_xml_schema.xsd"
         xsi:noNamespaceSchemaLocation="
                     http://pmd.sf.net/ruleset_xml_schema.xsd">
    <description>
        My custom rule set that checks my code...
    </description>

    <!-- Defining another value for the same key in an array literal overrides the previous key/value, which makes it effectively an unused code. -->
    <rule ref="rulesets/cleancode.xml/DuplicatedArrayKey" />

    <!-- Max complexity -->
    <rule ref="rulesets/codesize.xml/CyclomaticComplexity" >
        <properties>
            <property name="reportLevel" value="60" />
        </properties>
    </rule>

    <!-- An exit-expression within regular code is untestable and therefore it should be avoided. -->
    <rule ref="rulesets/design.xml/ExitExpression" />

    <!-- An eval-expression is untestable, a security risk and bad practice.-->
    <rule ref="rulesets/design.xml/EvalExpression" />

    <!-- Goto makes code harder to read and it is nearly impossible to understand the control flow of an application that uses this language construct.-->
    <rule ref="rulesets/design.xml/GotoStatement" />


    <!-- A class with an excessive number of children is an indicator for an unbalanced class hierarchy. You should consider to refactor this class hierarchy. -->
    <rule ref="rulesets/design.xml/NumberOfChildren" >
        <properties>
            <property name="minimum" value="25" />
        </properties>
    </rule>

    <!-- A class with many parents is an indicator for an unbalanced and wrong class hierarchy. -->
    <rule ref="rulesets/design.xml/DepthOfInheritance" />

    <!-- A class with too many dependencies has negative impacts on several quality aspects of a class. -->
    <rule ref="rulesets/design.xml/CouplingBetweenObjects" >
        <properties>
            <property name="maximum" value="40" />
        </properties>
    </rule>


    <!-- Prevent var_dump and debug functions -->
    <rule ref="rulesets/design.xml/DevelopmentCodeFragment"/>

    <!-- Using count/sizeof in loops expressions is considered bad practice and is a potential source of many bugs, especially when the loop manipulates an array, as count happens on each iteration. -->
    <rule ref="rulesets/design.xml/CountInLoopExpression"/>

    <!-- Looks for methods named 'getX()' with 'boolean' as the return type. The convention is to name these methods 'isX()' or 'hasX()'. -->
    <rule ref="rulesets/naming.xml/BooleanGetMethodName"/>

    <!-- Prevent unused code -->
    <rule ref="rulesets/unusedcode.xml">
        <!--- Should be used (and ignored in some specific case) but would require to understand WHY parameter have to be used -->
        <exclude name="UnusedFormalParameter"/>
    </rule>

    <!-- Prevent super global -->
    <rule ref="rulesets/controversial.xml/Superglobals"/>

    <!-- force camelcase on class name-->
    <rule ref="rulesets/controversial.xml/CamelCaseClassName"/>

    <!-- force camelcase on class property-->
    <rule ref="rulesets/controversial.xml/CamelCasePropertyName"/>

    <!-- force camelcase on class method-->
    <rule ref="rulesets/controversial.xml/CamelCaseMethodName"/>

    <!-- force camelcase on class parameter -->
    <rule ref="rulesets/controversial.xml/CamelCaseParameterName"/>

    <!-- camelcase on variable is done via phpcs -->

    <exclude-pattern>*Fixtures.php</exclude-pattern>
    <exclude-pattern>*ImportDataFromCSVCommand.php</exclude-pattern>
</ruleset>
